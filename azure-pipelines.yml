parameters:
  - name: terraformVersion
    type: string
    default: "0.13.4"
  - name: sendgridEnvironments
    type: object
    default:
    - environment: nonprod
      serviceConnection: dts-management-nonprod-intsvc
      rg: mgmt-state-store-nonprod-rg
      location: uksouth
      storage_account: dtsmgmtstatestorenonprod
      container: nonprod

    - environment: prod
      serviceConnection: dts-management-prod-intsvc
      rg: mgmt-state-store-prod-rg
      location: uksouth
      storage_account: dtsmgmtstatestoreprod
      container: prod

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

trigger:
  - master

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'


stages:
  - ${{ each environment in parameters.sendgridEnvironments }}:
    - stage: ${{ environment.environment }}
      jobs:
        - job: TestAndPlan
          steps:     
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: ${{ parameters.terraformVersion }}

          - task: TerraformCLI@0
            displayName: Terraform initialize
            inputs:
              command: init
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              backendType: azurerm
              ensurebackend: true
              backendServiceArm: ${{ environment.serviceConnection }}
              backendAzureRmResourceGroupName: ${{ environment.rg }}
              backendAzureRmResourceGroupLocation: ${{ environment.location }}
              backendAzureRmStorageAccountName: ${{ environment.storage_account }}
              backendAzureRmStorageAccountSku: Standard_ZRS
              backendAzureRmContainerName: ${{ environment.container }}
              backendAzureRmKey: SendGrid-${{ environment.environment }}/terraform.tfstate

          - task: TerraformCLI@0
            displayName: Terraform validate
            inputs:
              command: validate
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform

          - task: TerraformCLI@0
            displayName: Terraform plan
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: ${{ environment.serviceConnection }}
              commandOptions: -var-file=..\config\${{ environment.environment }}.tfvars


          - task: TerraformCLI@0
            displayName: Terraform apply
            condition: and(succeeded(), eq(variables.isMain, true))
            inputs:
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: ${{ environment.serviceConnection }}
              commandOptions: --auto-approve -var-file=..\config\${{ environment.environment }}.tfvars
